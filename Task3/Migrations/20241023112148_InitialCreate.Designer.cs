// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task3.Data;

#nullable disable

namespace Task3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241023112148_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Task3.Data.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "resume.docx",
                            FolderId = 1
                        },
                        new
                        {
                            Id = 2,
                            FileName = "budget.xlsx",
                            FolderId = 1
                        },
                        new
                        {
                            Id = 3,
                            FileName = "song.mp3",
                            FolderId = 1
                        },
                        new
                        {
                            Id = 4,
                            FileName = "cover.jpg",
                            FolderId = 1
                        },
                        new
                        {
                            Id = 5,
                            FileName = "project1.docx",
                            FolderId = 2
                        },
                        new
                        {
                            Id = 6,
                            FileName = "project2.docx",
                            FolderId = 2
                        },
                        new
                        {
                            Id = 7,
                            FileName = "vacation1.jpg",
                            FolderId = 5
                        },
                        new
                        {
                            Id = 8,
                            FileName = "vacation2.jpg",
                            FolderId = 3
                        },
                        new
                        {
                            Id = 9,
                            FileName = "old_song.mp3",
                            FolderId = 4
                        });
                });

            modelBuilder.Entity("Task3.Data.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Root"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Documents",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Music",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pictures",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Work",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Personal",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Projects",
                            ParentId = 5
                        },
                        new
                        {
                            Id = 8,
                            Name = "Old Music",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "Vacation",
                            ParentId = 4
                        });
                });

            modelBuilder.Entity("Task3.Data.Entities.File", b =>
                {
                    b.HasOne("Task3.Data.Entities.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Task3.Data.Entities.Folder", b =>
                {
                    b.HasOne("Task3.Data.Entities.Folder", "Parent")
                        .WithMany("ChildrenFolders")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Task3.Data.Entities.Folder", b =>
                {
                    b.Navigation("ChildrenFolders");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
